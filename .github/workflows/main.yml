name: Python Django Exercise CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: mock_db
      DB_HOST: 127.0.0.1
      DB_PORT: 5432

    steps:
      - uses: actions/checkout@v2

      - name: Build the Docker image
        run: docker build -t web-app-test ./blog_platform

      - name: Run tests
        run: docker run --env RUN_TESTS=1 --name django-test-container web-app-test python manage.py test

  build:
    name: Build & Deploy
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: staging
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: "google-github-actions/auth@v1"
        name: Google Cloud Auth
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: Configure docker for pushing
        run: gcloud auth configure-docker ${{ vars.REGION }}-docker.pkg.dev

      - name: Build the Docker image
        run: |
          docker build -t ${{ vars.IMAGE_NAME }}:latest ./blog_platform

      - name: Deploy to GCP Artifact Registry
        run: |
          docker tag ${{ vars.IMAGE_NAME }}:latest ${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_NAME }}/${{ vars.ARTIFACT_REGISTRY_REPOSITORY }}/${{ vars.IMAGE_NAME }}:latest
          docker push ${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_NAME }}/${{ vars.ARTIFACT_REGISTRY_REPOSITORY }}/${{ vars.IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.SERVICE_NAME}} \
            --image ${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_NAME }}/${{ vars.ARTIFACT_REGISTRY_REPOSITORY }}/${{ vars.IMAGE_NAME }}:latest \
            --region ${{ vars.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars=DB_NAME=${{ secrets.DB_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},INSTANCE_CONNECTION_NAME=${{ vars.INSTANCE_CONNECTION_NAME }}
            --add-cloudsql-instances=${{ vars.INSTANCE_CONNECTION_NAME }}
            
